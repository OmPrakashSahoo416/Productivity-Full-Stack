// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

// boards of particular organization 
model Board {
  id       String @id @default(cuid())
  title    String
  // db text to take input larger texts 
  imageUrl String @db.Text
  org_id   String

  // getting the joines list of lists where board matches 
  lists List[]

  @@map(name: "boards")
}

// lists to be shown on boards
model List {
  id    String @id @default(uuid())
  title String

  // To keep the ordering after drap and drop events or when loading also...
  order Int

  // Relation or join where board id is the foreign key and id is taken from board schema
  // on delete cascade means to delete the list when board is deleted...
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  boardId String

  // cards list in the list schema 
  cards Card[]

  // to get rid of errors on using the foreign key ==> pass the foreign key in index
  @@index([boardId])
}

// each card component in the list and should get deleted when the list is also deleted 
model Card {
  id          String @id @default(uuid())
  title       String
  description String @db.Text
  order       Int

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)

  listId String

  @@index([listId])
}

//activity logs in the organization page

// types of activity 
enum ActivityType {
  CREATE
  UPDATE
  DELETE
}

// type of object
enum ActivityObject {
  BOARD
  CARD
  LIST
}

// using the orgId to show in its activity page with user who did this and what he did to any obj
model ActivityLog {
  id String @id @default(uuid())

  orgId String

  ActivityType     ActivityType
  ActivityObject   ActivityObject
  ActivityObjectId String
  title String

  userName  String
  userImage String @db.Text()

  createdAt DateTime @default(now())
}

model OrgLimit {
  id String @id @default(uuid())
  orgId String @unique
  boardCount Int
}
